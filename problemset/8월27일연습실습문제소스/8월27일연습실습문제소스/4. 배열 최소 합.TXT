

def construct_candidates(a, k, input, c):
    in_perm = [False] * NMAX

    for i in range(1, k):
        in_perm[a[i]] = True

    ncandidates = 0
    for i in range(1, input + 1):
        if in_perm[i] == False:
            c[ncandidates] = i
            ncandidates += 1
    return ncandidates


def backtrack(a, k, input):
    global MAXCANDIDATES
    global minV
    c = [0] * MAXCANDIDATES

    if k == N:
        tsum = 0
        for i in range(1, k + 1):
            tsum += m[i-1][a[i]-1]
        if tsum < minV : minV = tsum

    else:
        k += 1
        ncandidates = construct_candidates(a, k, input, c)
        for i in range(ncandidates):
            a[k] = c[i]
            backtrack(a, k, input)



T = int(input())
for tc in range(1, T+1):
    N = int(input())
    m = [list(map(int,input().split())) for x in range (N)]
    u = [0 for i in range(N)]
    minV = 100
    MAXCANDIDATES = 100
    NMAX = 100
    a = [0] * (N + 1)
    backtrack(a, 0, N)
    print("#%d"%tc, minV)


# 
# 
# 
# def solve(k, s):
#     global minV
#     if s > minV : return
#     if k == N:
#         tsum = 0
#         for i in range(k):
#             tsum += mat[i][t[i]]
#         if tsum < minV : minV = tsum
#     else:
#         for i in range(N):
#             if visited[i]: continue
#             t[k] = i
#             visited[i] = 1
#             solve(k + 1, s + mat[k][i])
#             visited[i] = 0
# 
# T = int(input())
# for tc in range(1, T+1):
#     N = int(input())
#     mat = [list(map(int,input().split())) for x in range (N)]
# 
#     minV = 100000
#     t = [0] * N
#     visited = [0] * N
#     solve(0, 0)
#     print("#%d"%tc, minV)
# 
# 
# 
